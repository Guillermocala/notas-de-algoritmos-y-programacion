+	EJERCICIOS LISTAS SIMPLES
1- Dada una lista, formar la lista resultante de eliminar el nodo que sigue al nodo apuntado por p.
2- Dada una lista, devuelve el numero de elementos de la lista.
3- Destruye la lista retornando toda la memoria ocupada.
4- Haga un algoritmo que cree la lista organizada ascendentemente.
5- Implemente una funcion que dada una lista enlazada ptr, devuelva otra lista ptr1 con solamente
los nodos que almacenan un dato mayor que el promedio.
6-Hacer una funcion que retorna la posicion de la aparicion media del valor ELEM, la cual existe que
existen tantas ocurrencias del elemento antes que el(incluyendolo, si hay un numero par de apariciones)
que despues de el. por ej, para la lista de valores enteros <1,4,2,5,2,6,2,1,6,2,6>, la posicion
de la aparicion media del valor 2 es 5, la posicion de la aparicion media del valor 6 es 9, y
la del valor 5 es 4. si no ocurre retorna 0.
7- Hacer una funcion que deje en lista una sola ocurrencia de cada uno de los elementos presentes. garantizando que
sea la aparicion media del elemento la que permaneza. por ej, despues de podar la lista de valores enteros <1,4,2,5,2,6,2,1,6,2,6>
se obtiene la lista <1,4,5,2,6>
8- Hacer una funcion que retorne la posicion de la i-esima ocurrencia del elem de la lista. Si hay menos de
i ocurrencias, retorna el valor de 0.
9- Hacer una funcion que deje en lista todos los elementos de lista menores que elem, y en lista2 los mayores a dicho
elemento. Suponga que las listas list1 y list2 llegan inicializadas y vacias a la rutina.
10- La mediana de una lista se define como el elemento de dicha secuencia tal que la mitad de los elementos son menores
que el y la otra mitad mayores o iguales. suponiendo que la lista list no es vacia, no ordenada y sin elementos repetidos, esta
funcion calcula su mediana.
11- Hacer una funcion que retorna la lista de ceros y unos correspondientes a la representacion binaria del entero positivo num.
Por ej, si num = 215, binario = <11010111>.
12- Hacer una funcion que diga si una lista de caracteres es palindroma(igual leerla de izq a der que de der a izq). por ej,
son palindromo <ANITALAVALATINA> esta funcion indica si la lista list es palindromo.
13- Hacer una funcion que diga si las listas list1 y list2 son semejantes: son semejantes si tienen la misma info en diferente orden.
14- Hacer una funcion que retorna el elemento de la lista list cuyo valor es maximo, suponiendo la existencia
de una relacion de orden < definida entre los elementos de la lista. La lista list no es vacia.
15- Hacer una funcion que diga si todos los elementos de la lista aparecen igual numero de veces.
16- Hacer una funcion que informe si la lista list1 es mayor que la lista list2, utilizando el sgte criterio para decidir
si una lista es mayor que otra: Sea list1 = <a1, a2, ..., an> y list2 = <b1, b2, ..., bm> se dice que list1 es mayor que list2
si: 1. ((ai = b) 1 <= i <= m) y (n > m))
	 2. ej i <= n, j <= m (ai = bi, 1 <= i <= j)  y (aj >bj)
17- Hacer una funcion que diga si la lista 2 esta contenida en la lista 1.
18- Inserta la list2 en la list1 de manera que el primer elemento de list2 quede en la posicion del final de la list1.
19- Hacer una funcion que elimine de la lista todos los elementos correspondientes entre la posicion p1 y la posicion p2 inclusive.
20- Elimina todas las ocurrencias de la list2 en la list1. (l1[1,1,2], l2[1,2,3] = l1[1])
21- Hacer un procedimiento que ordene ascendentemente la lista ya creada.
22- list es una lista de digitos. intLista es el entero que se puede crear a partir de esa lista. por ej, si list = <4,2,1,4>, intLista = 4214.
23- Elimina de la lista list1 todos los elementos que aparecen en la lista list2.
24- Void sumarLista(lista list1, lista list2)
	list1 y list2 son listas de digitos que representan un numero entero. Esta rutina suma list1 y list2. por ej, si
	list1 = <4,2,1,4> y list2 = <3,4>, despues de la llamada a la funcion el valor de list1 es <4,2,4,8>.
25- Void restarLista(lista list1, lista list2)
	list1 y list2 son listas de digitos que representan un numero entero. Esta rutina suma list1 y list2. por ej, si
	list1 = <4,2,1,4> y list2 = <3,4>, despues de la llamada a la funcion el valor de list1 es <4,1,8,0>.

DESARROLLO======================================================================
1-------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	cout << "Ingrese el dato a buscar: ";
	cin >> i;
	ptr = ElimSgte(ptr, i);
	break;
-----en la funcion:
nodoa *ElimSgte(nodoa *ptr, int elem)
{
   nodoa *p, *q;
   p = Buscarllave(ptr, elem);
   if(p == NULL || p->sig == NULL)
   {
      cout << "No se puede eliminar" << endl;
   }
   else
   {
      q = p->sig;
      p->sig = q->sig;
      free(q);
   }
   return ptr;
}
2-------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	Cuenta(ptr);
	getch();
	break;
-----en la funcion:
/*se puede aÃ±adir dentro de la funcion mostrar solamente colocando un contador*/
void *Cuenta(nodoa *ptr)
{
   int cant = 0;
   nodoa *p;
   p = ptr;
   while(p != NULL)
   {
      p = p->sig;
      cant++;
   }
   cout << "La cantidad de elementos de la lista es: " << cant << endl;
}
3-------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	Memory(ptr);
	ptr = DestroyList(ptr);
	getch();
	break;
-----en la funcion:
void *Memory(nodoa *ptr)
{
   int cant = 0;
   nodoa *p, *q;
   p = ptr;
   while(p != NULL)
   {
      cant += sizeof(p);
      p = p->sig;
   }
   cout << "La cantidad de memoria de la lista es: " << cant << " bytes" << endl;
}
nodoa *DestroyList(nodoa *ptr)
{
   nodoa *p, *r;
   r = ptr;
   while(r != NULL)
   {
      p = ptr;
      if(p->sig == NULL)
      {
         ptr = NULL;
         free(p);
         cout << "Lista destruida" << endl;
         return ptr;
      }
      else
      {
         ptr = ptr->sig;
         free(p);
      }
      r = r->sig;
   }
}
4-------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	//cout << "Espacio reservado para ejercicio..." << endl;
	if (ptr != NULL) {
		/*unexpected function*/
		ptr1 = crea_ascendente(ptr);
		cout << "Operacion exitosa!" << endl;
	}
	else {
		cout << "lista vacia..." << endl;
	}
	getch();
	break;
-----en la funcion:
nodoa *OrdenarAsc(nodoa *ptr) {
   nodoa *p, *q, *aux, *aux2;
   p = ptr;
   while(p != NULL) {
      q = ptr;
      while(q != NULL) {
         if(q->sig != NULL && q->info > q->sig->info) {
            aux = q->sig;
            if(q == ptr) {
               q->sig = aux->sig;
               aux->sig = q;
               ptr = aux;
            }
            else {
               aux2 = ptr;
               while(aux2->sig != q) {
                  aux2 = aux2->sig;
               }
               q->sig = aux->sig;
               aux2->sig = aux;
               aux->sig = q;
            }
				/*si movemos el nodo que contiene a p, debemos devolverlo a su posicion
				anterior para no alterar el buen funcionamiento del algoritmo*/
            if(q == p) {
               p = aux;
            }
         }
         q = q->sig;
      }
      p = p->sig;
   }
   return ptr;
}
nodoa *crea_ascendente(nodoa *ptr) {
   /*hago una copia de la lista original y luego someto dicha copia a
   un algoritmo de ordenamiento, al final retorno dicha lista ordenada*/
   nodoa *aux = NULL;
   for (nodoa *i = ptr; i != NULL; i = i->sig) {
      aux = InsertaCabeza(aux, i->info);
   }
   aux = OrdenarAsc(aux);
   return aux;
}
5-------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	if(ptr == NULL || ptr->sig == NULL)
	{
		printf("La lista esta vacia o tiene un solo elemento");
	}
	else
	{
		ptr1 = MayorPromedio(ptr, ptr1);
		Mostrar(ptr);
		Mostrar(ptr1);
	}
	getch();
	break;
-----en la funcion:
nodoa *MayorPromedio(nodoa *ptr, nodoa* ptr1)
{
   int prom, cant = 0, cont = 0;
   nodoa *q;
   q = ptr;
   while(q != NULL)
   {
      cant += q->info;
      cont++;
      q = q->sig;
   }
   prom = cant / cont;
   cout << "El promedio es: " << prom << endl;
   getch();
   q = ptr;
   while(q != NULL)
   {
      if(q->info >= prom)
      {
         ptr1 = InsertaCabeza(ptr1, q->info);
      }
      q = q->sig;
   }
   return ptr1;
}
6-------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	if(ptr == NULL || ptr->sig == NULL)
	{
		printf("La lista esta vacia o tiene un solo elemento");
	}
	else
	{
		cout << "Ingrese el dato a buscar: ";
		cin >> i;
		j = PosMedia(ptr, i);
		if(j != 0)
		{
			cout << "La posicion media del dato " << i << " es: " << j << endl;
		}
		else
		{
			cout << "No se puede operar..." << endl;
		}
	}
	getch();
	break;
-----en la funcion:
int PosMedia(nodoa *ptr, int elem)
{
   int pos = 1, cant = 0, exit = 0;
   nodoa *p, *q;
   p = Buscarllave(ptr, elem);
   if(p == NULL)
   {
      cout << "Elemento no encontrado" << endl;
      return exit;
   }
   else
   {
      /*recorremos la lista para ver cuantas ocurrencias del elem hay*/
      for(p = ptr; p != NULL; p = p->sig)
      {
         if(p->info == elem)
         {
            cant++;
         }
      }
      if(cant != 1)
      {
         /*si es impar reasignamos el valor con su equivalencia al valor medio, el cual
         seria la mitad + 1. de lo contrario, solo la mitad*/
         if(cant % 2 != 0)
         {
            cant = ((cant / 2) + 1);
         }
         else
         {
            cant = (cant / 2);
         }
         /*recorremos y llegamos hasta el elemento y retornamos su posicion*/
         for(p = ptr; p != NULL; p = p->sig)
         {
            if(p->info == elem)
            {
               cant--;
               if(cant == 0)
               {
                  return pos;
               }
            }
            pos++;
         }
      }
      else
      {
         /*si solo hay una ocurrencia del elem retornamos su posicion ya que seria
         su posicion media*/
         for(q = ptr; q != NULL; q = q->sig)
         {
            if(q->info == elem)
            {
               break;
            }
            pos++;
         }
         return pos;
      }
   }
}
7-------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	if(ptr == NULL || ptr->sig == NULL)
	{
		printf("La lista esta vacia o tiene un solo elemento");
	}
	else
	{
		ptr1 = InsertaPos(ptr, ptr1);
		Mostrar(ptr);
		Mostrar(ptr1);
	}
	getch();
	break;
-----en la funcion:
/*usamos PosMedia la cual creamos en el ejercicio pasado, asi que no la pondre de nuevo*/
nodoa *InsertaPos(nodoa *ptr, nodoa *ptr1)
{
   int pos, cant = 1;
   nodoa *p, *q;
   /*recorremos la lista para saber cuantos elementos hay en total*/
   for(p = ptr; p != NULL; p = p->sig)
   {
      cant++;
   }
   /*empezamos en 1(la posicion inicial de la lista) y terminamos en el max de la lista*/
   for(int i = 1; i <= cant; i++)
   {
      /*recorremos la lista para hallar la posicion i*/
      for(p = ptr; p != NULL; p = p->sig)
      {
         pos = PosMedia(ptr, p->info);
         if(pos == i)
         {
            /*verificamos que el elemento no este repetido, porque no nos interesa
            guardar mas de una ocurrencia*/
            q = Buscarllave(ptr1, p->info);
            if(q == NULL)
            {
               ptr1 = InsertaCola(ptr1, p->info);
            }
         }
      }
   }
   return ptr1;
}
8-------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	if(ptr == NULL || ptr->sig == NULL)
	{
		printf("La lista esta vacia o un elemento");
	}
	else
	{
		cout << "Ingrese el dato a buscar: ";
		cin >> i;
		j = PosOcurrencia(ptr, i);
		if(j > 0)
		{
			cout << "La posicion es: " << j << endl;
		}
		else
		{
			cout << "El numero pedido de ocurrencia no corresponde al de las almacenadas" << endl;
		}
	}
	getch();
	break;
-----en la funcion:
int PosOcurrencia(nodoa *ptr, int elem)
{
   int cant = 0, ocu, pos = 1;
   nodoa *q;
   q = Buscarllave(ptr, elem);
   if(q == NULL)
   {
      cout << "Elemento no encontrado..." << endl;
      /*para no aÃ±adir mas casos o usar declaraciones aparte uso una variable
      ya inicializada para salir*/
      return cant;
   }
   else
   {
      for(q = ptr; q != NULL; q = q->sig)
      {
         if(q->info == elem)
         {
            cant++;
         }
      }
      cout << "El dato " << elem << " tiene " << cant << " ocurrencias" << endl;
      cout << "Ingrese la ocurrencia de la cual desea saber su posicion: ";
      cin >> ocu;
      if(ocu > 0 && ocu < cant)
      {
         for(q = ptr; q != NULL; q = q->sig)
         {
            if(q->info == elem)
            {
               ocu--;
               if(ocu == 0)
               {
                  return pos;
               }
            }
            pos++;
         }
      }
      else
      {
         pos = 0;
         return pos;
      }
   }
}
9-------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	if(ptr == NULL || ptr1 == NULL)
	{
		printf("Lista 1 o lista 2 vacia");
	}
	else
	{
		cout << "Ingrese el dato: ";
		cin >> i;
		MenorMayorElem(ptr, ptr1, i);
	}
	getch();
	break;
-----en la funcion:
void MenorMayorElem(nodoa *&ptr, nodoa *&ptr1, int elem)
{
   nodoa *p;
   for(p = ptr; p != NULL; p = p->sig)
   {
      if(p->info <= elem)
      {
         ptr = Eliminacion(ptr, p->info);
         p = ptr;
      }
   }
   for(p = ptr1; p != NULL; p = p->sig)
   {
      if(p->info >= elem)
      {
         ptr1 = Eliminacion(ptr1, p->info);
         p = ptr1;
      }
   }
   cout << "Operacion realizada exitosamente" << endl;
}
10------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	//cout << "Espacio reservado para ejercicio..." << endl;
	if (ptr != NULL) {
		cout << "Mediana de datos no repetidos" << endl;
		float result = mediana(ptr);
		if (result != 999999) {
			cout << "La mediana es: " << result << endl;
		}
		else {
			cout << "Hay datos repetidos en la lista!" << endl;
		}
	}
	else {
		cout << "Lista vacia..." << endl;
	}
	getch();
	break;
-----en la funcion:
bool repeat(nodoa *ptr) {
   int aux;
   for (nodoa *i = ptr; i != NULL; i = i->sig) {
      for (nodoa *j = ptr; j != NULL; j = j->sig) {
         if (i != j && i->info == j->info) {
            return false;
         }
      }
   }
   return true;
}
int cantidad(nodoa *ptr) {
   int cont = 0;
   for (nodoa *i = ptr; i != NULL; i = i->sig) {
      cont++;
   }
   return cont;
}
float mediana(nodoa *ptr) {
   if (repeat(ptr)) {
      nodoa *aux = ptr;
      float result;
      int par_impar = cantidad(ptr);
      if (par_impar % 2 != 0) {
         /*mediana de cantidad impor. (numDatos + 1) / 2*/
         result = (par_impar + 1) / 2;
         for (int i = 1; i < result; i++) {
            aux = aux->sig;
         }
         return aux->info;
      }
      else {
         /*mediana de cantidad por. (Suma de los dos datos de la mitad ) / 2*/
         int pivot = par_impar / 2;
         for (int i = 1; i < pivot; i++) {
            aux = aux->sig;
         }
         result = (aux->info + aux->sig->info) / 2;
         return result;
      }
   }
   else {
      /*en caso que no lo encuentre retorne un dato muy alto, para no confundirlo*/
      return 999999;
   }
}
11------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	//cout << "Espacio reservado para ejercicio..." << endl;
	ptr = NULL; /*para dejar la lista en blanco, sino acumularia otros numeros binarios*/
	cout << "Decimal a binario \nIngrese el decimal: ";
	cin >> j;
	ptr = decimal_a_binario(ptr, j);
	cout << "Operacion exitosa!(guardado en lista1)" << endl;
	getch();
	break;
-----en la funcion:
nodoa *decimal_a_binario(nodoa *ptr, int decimal) {
   int aux;
   while (decimal > 1) {
      aux = decimal % 2;
      /*insertamos al reves, para que el binario quede corractamente*/
      ptr = InsertaCabeza(ptr, aux);
      decimal /= 2;
   }
   /*por fuera del ciclo insertamos el 1 final*/
   ptr = InsertaCabeza(ptr, 1);
   return ptr;
}
12------------------------------------------------------------------------------
-----en el main:
case 1:
	ptr = NULL;
	cout << "Ingrese el dato: ";
	cin.ignore();
	getline(cin, temp);
	cadena = new char[temp.size()];
	strcpy(cadena, temp.c_str());
	for (int i = 0; i < temp.size()  ; i++) {
		ptr = InsertaCola(ptr, cadena[i]);
	}
	getch();
	break;
case 6:
	system("cls");
	//cout << "Espacio reservado para ejercicio..." << endl;
	if (ptr != NULL) {
		if (palindrome(ptr)) {
			cout << "palindrome" << endl;
		}
		else {
			cout << "no palindrome" << endl;
		}
	}
	else {
		cout << "Lista vacia" << endl;
	}
	getch();
	break;
-----en la funcion:
bool palindrome(nodoa *ptr) {
   nodoa *aux = ptr, *list2 = NULL;
   /*uso una lista auxilar para colocar al reves los elementos*/
   while (aux != NULL) {
      list2 = InsertaCabeza(list2, aux->info);
      aux = aux->sig;
   }
   /*solo queda verificar sencillamente los elementos en la misma posicion*/
   while (list2 != NULL) {
      if (list2->info != ptr->info) {
         return false;
      }
      list2 = list2->sig;
      ptr = ptr->sig;
   }
   return true;
}
13------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	//cout << "Espacio reservado para ejercicio..." << endl;
	cout << "Algoritmo para evaluar si son listas iguales(lista1 y lista2)" << endl;
	if (ptr != NULL && ptr1 != NULL) {
		if (listas_iguales(ptr, ptr1)) {
			cout << "listas iguales" << endl;
		}
		else {
			cout << "no listas iguales" << endl;
		}
	}
	else {
		cout << "Lista 1 o 2 vacias" << endl;
	}
	getch();
	break;
-----en la funcion:
bool listas_iguales(nodoa *ptr, nodoa *ptr1) {
   int cant;
   for (nodoa *i = ptr; i != NULL; i = i->sig) {
      cant = 1;
      /*reviso cuantas ocurrencias hay del elemento en la posicion i de lista 1*/
      for (nodoa *j = ptr; j != NULL; j = j->sig) {
         if (i != j && i->info == j->info) {
            cant++;
         }
      }
      /*pregunto por esa misma cantidad en la lista 2, si no es la misma return false*/
      for (nodoa *k = ptr1; k != NULL; k = k->sig) {
         if (i->info == k->info) {
            cant--;
         }
      }
      if (cant != 0) {
         return false;
      }
   }
   return true;
}
14------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	//cout << "Espacio reservado para ejercicio..." << endl;
	cout << "ELEMENTO MAXIMO DE LA LISTA" << endl;
	if (ptr != NULL) {
		/*use funcion modelo para hacerlo mas flexible*/
		int res = maximo<int>(ptr);
		cout << "El elemento maximo es: " << res << endl;
	}
	else {
		cout << "lista vacia..." << endl;
	}
	getch();
	break;
-----en la funcion:
/*me dio la gana de usar funciones modelo y ya :V pero no se puede usar strings*/
template <class G>
G maximo(nodoa *ptr) {
   nodoa *aux = ptr;
   G result = aux->info;
   while (aux != NULL) {
      if (aux->info > result) {
         result = aux->info;
      }
      aux = aux->sig;
   }
   return result;
}
15------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	//cout << "Espacio reservado para ejercicio..." << endl;
	if (ptr != NULL) {
		/*unexpected function*/
		if (igual_cant(ptr)) {
			cout << "ocurrencias iguales" << endl;
		}
		else {
			cout << "no iguales" << endl;
		}
	}
	else {
		cout << "lista vacia..." << endl;
	}
	getch();
	break;
-----en la funcion:
/*creamos esta estructura para tener un manejo flexible de la solucion
a dicho ejercicio, en caso que se ocupen datos muy grandes*/
struct temp {
   int dato;
   int cant;
   temp *sig;
};
temp *ingresa(temp *ptr, int num, int veces) {
   temp *aux = (struct temp*) malloc (sizeof (temp));
   aux->dato = num;
   aux->cant = veces;
   if (ptr == NULL) {
      aux->sig = NULL;
      ptr = aux;
   }
   else {
      aux->sig = ptr;
      ptr = aux;
   }
   return ptr;
}
bool existe(temp *ptr, int dato) {
   if (ptr == NULL) {
      return false;
   }
   else {
      for (temp *i = ptr; i != NULL; i = i->sig) {
         if (dato == i->dato) {
            return true;
         }
      }
      return false;
   }
}
bool igual_cant(nodoa *ptr) {
   int cant, dato;
   temp *aux = NULL;
   for (nodoa *i = ptr; i != NULL; i = i->sig) {
      cant = 1;
      dato = i->info;
      /*preguntamos si el elemento ya esta dentro de la lista, sino opera normal*/
      if (!(existe(aux, dato))) {
         for (nodoa *j = ptr; j != NULL; j = j->sig) {
            /*contamos los elementos iguales de la lista*/
            if (i != j && i->info == j->info) {
               cant++;
            }
         }
         aux = ingresa(aux, dato, cant);
      }
   }
   cant = aux->cant;
   /*evaluamos si la cant de veces de la lista es diferente, en caso tal retorna falso*/
   for (temp *i = aux; i != NULL; i = i->sig) {
      if (cant != i->cant) {
         return false;
      }
   }
   return true;
}
16------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	//cout << "Espacio reservado para ejercicio..." << endl;
	if (ptr != NULL && ptr1 != NULL) {
		/*unexpected function*/
		if (mayor(ptr, ptr1)) {
			cout << "lista 1 es mayor que lista 2" << endl;
		}
		else {
			cout << "lista 1 NO es mayor que lista 2" << endl;
		}
	}
	else {
		cout << "lista vacia..." << endl;
	}
	getch();
	break;
-----en la funcion:
int cant_lista(nodoa *ptr) {
   int cant = 0;
   for (nodoa *i = ptr; i != NULL; i = i->sig) {
      cant++;
   }
   return cant;
}
bool mayor(nodoa *ptr, nodoa *ptr1) {
   int list1 = cant_lista(ptr);
   int list2 = cant_lista(ptr1);
   nodoa *aux = ptr, *aux2 = ptr1;
   if (list1 > list2) {
      for (int i = 0; i < list2; i++) {
         if (aux->info < aux2->info) {
            return false;
         }
         aux2 = aux2->sig;
         aux = aux->sig;
      }
		/*en caso de acabar la lista 2, como tiene mas elementos la otra. por deduccion
		debe ser la lista con mas elementos la mayor*/
      return true;
   }
	/*aca valida si las listas tienen igual tamaÃ±o, en caso de ser ambas iguales
	solamente retorna falso y ya, el ejercicio solo dice si es mayor o no. no
	especifica que diga si es igual, asi que esta de mÃ¡s escribir codigo extra*/
   else {
      for (int i = 0; i < list1; i++) {
         if (aux->info > aux2->info) {
            return true;
         }
         aux2 = aux2->sig;
         aux = aux->sig;
      }
      return false;
   }
}
17------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	//cout << "Espacio reservado para ejercicio..." << endl;
	if (ptr != NULL && ptr1 != NULL) {
		/*unexpected function*/
		if (contenida(ptr1, ptr)) {
			cout << "Lista 2 contenida en lista 1" << endl;
		}
		else {
			cout << "Lista 2 NO contenida en lista 1" << endl;
		}
	}
	else {
		cout << "lista vacia..." << endl;
	}
	getch();
	break;
-----en la funcion:
bool contenida(nodoa *ptr1, nodoa *ptr) {
   nodoa *aux = ptr1;
   bool entrada = false, consecutivo = true;
   for (nodoa *i = ptr; i != NULL; i = i->sig) {
      if (i->info == aux->info) {
         entrada = true;
         aux = aux->sig;
      }
      else {
         if (entrada == true) {
            /*comprueba que no hay una sucesion de la lista 2 en la lista 1
            (no esta contenida)*/
            consecutivo = false;
         }
      }
   }
   return (entrada && consecutivo) ? true : false;
}
18------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	//cout << "Espacio reservado para ejercicio..." << endl;
	if (ptr != NULL && ptr1 != NULL) {
		/*unexpected function*/
		ptr = insert_list(ptr, ptr1);
	}
	else {
		cout << "lista vacia..." << endl;
	}
	getch();
	break;
-----en la funcion:
nodoa *insert_list(nodoa *ptr, nodoa* ptr1) {
   /*segun lo que comprendi es insertar la lista 2 al final de la lista 1
   si se quiere insertar al inicio se usa InsertaCabeza*/
   nodoa *aux = ptr;
   for (nodoa *i = ptr1; i != NULL; i = i->sig) {
      aux = InsertaCola(aux, i->info);
   }
   /*como solo nos interesa una lista(la union), retornamos el puntero con dicha info*/
   return aux;
}
19------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	//cout << "Espacio reservado para ejercicio..." << endl;
	if (ptr != NULL) {
		/*unexpected function*/
		int init, end;
		int limit = cantidad(ptr);
		cout << "ingrese el rango inicial(mayor a cero): ";
		cin >> init;
		while (init <= 0) {
			cout << "valor erroneo!" << endl;
			cout << "ingrese el rango inicial(mayor a cero): ";
			cin >> init;
		}
		cout << "ingrese el rango final(mayor al rango inicial): ";
		cin >> end;
		while (end < init || end > limit) {
			cout << "valor erroneo!" << endl;
			cout << "ingrese el rango final(mayor al rango inicial): ";
			cin >> end;
		}
		ptr = elim_rango(ptr, init, end);
	}
	else {
		cout << "lista vacia..." << endl;
	}
	getch();
	break;
-----en la funcion:
nodoa *elim_rango(nodoa *ptr, int ini, int fin) {
   nodoa *aux = ptr, *aux2 = ptr, *aux3;
   /*colocamos un ptr en el elemento a eliminar y uno antes para poder hacer
   conexiones y no perder elementos*/
   for (int i = 1; i < ini; i++) {
      aux = aux->sig;
      if ((i + 1) < ini) { /*con esto dejamos un ptr antes del que se va a eliminar*/
         aux2 = aux2->sig;
      }
   }
   for (int i = ini; i <= fin; i++) {
      /*para poder conectar de manera "facil" posiciono un ptr despues del que
      se va a eliminar, si no usaramos aux3 se puede usar aux2->sig = aux->sig*/
      aux3 = aux->sig;
      if (aux == ptr) {
         ptr = ptr->sig;
         aux2 = ptr;
      }
      else {
         aux2->sig = aux3;
      }
      free(aux);
      /*reposicionamos el ptr eliminado al elemento sgte, si no usaramos aux3
      se podria usar aux = aux2->sig*/
      aux = aux3;
   }
   return ptr;
}
20------------------------------------------------------------------------------
-----en el main:

-----en la funcion:

21------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	if(ptr == NULL || ptr->sig == NULL)
	{
		printf("La lista esta vacia o tiene un solo elemento");
	}
	else
	{
		ptr = OrdenarAsc(ptr);
		cout << "lista ordenada" << endl;
	}
	getch();
	break;
-----en la funcion:
nodoa *OrdenarAsc(nodoa *ptr)
{
   nodoa *p, *q, *aux, *aux2;
   p = ptr;
   while(p != NULL)
   {
      q = ptr;
      while(q != NULL)
      {
         if(q->sig != NULL && q->info > q->sig->info)
         {
            aux = q->sig;
            if(q == ptr)
            {
               q->sig = aux->sig;
               aux->sig = q;
               ptr = aux;
            }
            else
            {
               aux2 = ptr;
               while(aux2->sig != q)
               {
                  aux2 = aux2->sig;
               }
               q->sig = aux->sig;
               aux2->sig = aux;
               aux->sig = q;
            }
				/*si movemos el nodo que contiene a p, debemos devolverlo a su posicion
				anterior para no alterar el buen funcionamiento del algoritmo*/
            if(q == p)
            {
               p = aux;
            }
         }
         q = q->sig;
      }
      p = p->sig;
   }
   return ptr;
}
22------------------------------------------------------------------------------
-----en el main:

-----en la funcion:
23------------------------------------------------------------------------------
-----en el main:
case 6:
	system("cls");
	//cout << "Espacio reservado para ejercicio..." << endl;
	if (ptr != NULL && ptr1 != NULL) {
		/*unexpected function*/
		ptr = elimTodasOcu(ptr, ptr1);
		cout << "Operacion exitosa" << endl;
	}
	else {
		cout << "lista vacia..." << endl;
	}
	getch();
	break;
-----en la funcion:
nodoa *elimTodasOcu(nodoa *ptr, nodoa *ptr1) {
   nodoa *aux;
   for (nodoa *i = ptr1; i != NULL; i = i->sig) {
      aux = Buscarllave(ptr, i->info);
      if (aux != NULL) {
         ptr = Eliminacion(ptr, i->info);
      }
   }
   /*como en esencia solo modificamos una lista, retornamos el ptr de dicha lista*/
   return ptr;
}
24------------------------------------------------------------------------------
-----en el main:

-----en la funcion:
25------------------------------------------------------------------------------
-----en el main:

-----en la funcion:
FINAL===========================================================================
