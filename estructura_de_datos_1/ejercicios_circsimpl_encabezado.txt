EJERCICIOS DEL MODULO DE GARRIDO DE LISTAS CIRCULARES SIMPLES CON ENCABEZADO (COMPLETE)
1- Dada una lista circular, realizar un algoritmo que ordene la lista circular.
2- Realizar un algoritmo que inserte un nodo con informacion ELEM despues de la n-sima ocurrencia
   de un dato dentro de la lista circular llamado xinfo.
3- Dadas 3 listas circulares enlazadas y ordenadas. cree una lista circular con los nodos que aparecen en al menos dos de las 3 listas.
4- Un grupo de personas de pie forman un circulo y dado un N contar hasta el n-esimo nodo y eliminarlo hasta
   dejar una sola persona de pie(problema de josephus).
5- Considera la variacion del problema de josephus. Un grupo de personas de pie forman un circulo y cada uno elige un entero
   positivo. Se selecciona uno de los nombres y un entero positivo N. Empezando con la persona cuyo nombre se elige
   cuenta al rededor del circulo en sentido dextrogico y eliminan la n-esima persona despues, se elige
   el entero de esta persona a eliminar a la sgte persona a eliminar.
6- Escribe un programa para almacenar en una lista doblemente enlazada, el centesimo numero de la serie fibonacci.

DESARROLLO
1----------------------------------------------------------------------------------
-----en el main:
case 6:
   if(ptr == NULL)
   {
      cout << "la lista esta vacia" << endl;
      cin.get();
   }
   else if(ptr->sig->sig == ptr)
   {
      cout << "la lista solo tiene un elemento" << endl;
      cin.get();
   }
   else
   {
      int opt;
      system("clear");
      if(ptr == NULL)
      {
         cout << "Lista vacia" <<endl;
      }
      else
      {
         cout << "1- Ordenar Descendente\n2- Ordenar Ascendente" << endl;
         cout << "Ingrese una opcion: ";
         cin >> opt;
         switch(opt)
         {
            case 1:
               ptr = OrdenarDesc(ptr);
               break;
            case 2:
               ptr = OrdenarAsc(ptr);
               break;
            default:
               cout << "Valor invalido!" << endl;
               cin.get();
               break;
         }
      }
   }
   cin.ignore();
   break;
-----en la funcion:
/*para hacer ordenar ascendente solo cambiamos el "<" por ">" en el primer if de
*los ciclos anidados*/
Nodo *OrdenarDesc(Nodo *ptr)
{
   Nodo *p, *q, *aux, *aux2;
   p = ptr->sig;
   while(p != ptr)
   {
      q = ptr->sig;
      while(q != ptr)
      {
         /*para que no se produzca un inifity loop tenemos que dejar a q en
         ptr->ant con q->sig != ptr*/
         if(q->sig != ptr && q->info < q->sig->info)
         {
            aux = q->sig;
            if(q == ptr->sig)
            {
               q->sig = aux->sig;
               aux->sig = q;
               ptr->sig = aux;
            }
            else
            {
               if(aux->sig != ptr)
               {
                  aux2 = ptr->sig;
                  while(aux2->sig != q)
                  {
                     aux2 = aux2->sig;
                  }
                  q->sig = aux->sig;
                  aux->sig = q;
                  aux2->sig = aux;
               }
               else
               {
                  aux2 = ptr->sig;
                  while(aux2->sig != q)
                  {
                     aux2 = aux2->sig;
                  }
                  aux2->sig = aux;
                  q->sig = ptr;
                  aux->sig = q;
               }
            }
            /*en el caso de que rotemos un nodo y este tenga referenciado el bucle de recorrido
            principal, debemos regresar este a su posicion anterior para no afectar el funcionamiento de la funcion*/
            if(q == p)
            {
               p = aux;
            }
         }
         else
         {
            q = q->sig;
         }
      }
      p = p->sig;
   }
   cin.get();
   return ptr;
}
2----------------------------------------------------------------------------------
en el main:
case 8:
   system("clear");
   if(ptr == NULL)
   {
      cout << "La lista esta vacia." << endl;
      cin.ignore();
      cin.get();
   }
   else if(ptr->sig->sig == ptr)
   {
      cout << "La lista solo tiene un elemento." << endl;
      cin.ignore();
      cin.get();
   }
   else
   {
      InserOcurrencia(ptr);
   }
   break;
-----en la funcion:
Nodo *InserOcurrencia(Nodo *ptr)
{
   /*uso variables independientes para tener mejor manejo de la informacion y evitar ambiguedades*/
   int cont, cont2, info, ocu, info2;
   Nodo *aux, *aux2;
   Nodo *p = (struct Nodo*) malloc (sizeof(Nodo));
   aux = ptr->sig;
   /*solo esta disenado para cuando hay un solo elemento con ocurrencias*/
   while(aux != ptr)
   {
      info = aux->info;
      aux2 = ptr->sig;
      cont = 0;
      while(aux2 != ptr)
      {
         if(info == aux2->info)
         {
            cont++;
         }
         aux2 = aux2->sig;
      }
      if(cont > 1)
      {
         cout << "el elemento repetido es: " << info << " repetido " << cont << " veces."<< endl;
         break;
      }
      aux = aux->sig;
   }
   if(cont == 1)
   {
      cout << "No hay ocurrencias en la lista." << endl;
      cin.ignore();
      cin.get();
   }
   else
   {
      cout << "Despues de que ocurrencia desea ingresar el dato?: ";
      cin >> ocu;
      if(ocu >= 1 && ocu <= cont)
      {
         cont2 = ocu;
         cout << "Ingrese el dato del nodo: ";
         cin >> info2;
         p->info = info2;
         /*recorro la lista y disminuyo cont2 hasta 0 para indicar que la ocurrencia
         ha sido ubicada y procedemos a insertar*/
         while(aux->sig != ptr)
         {
            if(aux->info == info)
            {
               cont2--;
            }
            if(cont2 == 0)
            {
               break;
            }
            aux = aux->sig;
         }
         p->sig = aux->sig;
         aux->sig = p;
      }
      else
      {
         cout << "Ha ingresado un numero incorrecto" << endl;
         cin.ignore();
         cin.get();
      }
   }
}
3----------------------------------------------------------------------------------
-----en el main:
case 8:
   system("clear");
   if(ptr == NULL)
   {
      cout << "La lista 1 esta vacia." << endl;
      cin.ignore();
      cin.get();
   }
   else if(ptr2 == NULL)
   {
      cout << "La lista 2 esta vacia." << endl;
      cin.ignore();
      cin.get();
   }
   else if(ptr3 == NULL)
   {
      cout << "La lista 3 esta vacia." << endl;
      cin.ignore();
      cin.get();
   }
   else
   {
      DosDeTres(ptr, ptr2, ptr3);
   }
   break;
-----en la funcion:
Nodo *DosDeTres(Nodo *ptr, Nodo *ptr2, Nodo *ptr3)
{
   /*al ser 3 listas solo necesitamos hacer 2 recorridos: el de la primera lista con las
   2 sgtes y la ultima lista con las 2 primeras y asi evitamos evaluar la lista 2*/
   Nodo *q, *aux, *aux2, *aux3;
   /*con esta seccion comparamos la lista 1 con la lista 2 y 3*/
   aux = ptr->sig;
   while(aux != ptr)
   {
      aux2 = ptr2->sig;
      while(aux2 != ptr2)
      {
         aux3 = ptr3->sig;
         while(aux3 != ptr3)
         {
            if(aux->info == aux2->info || aux->info == aux3->info)
            {
               q = Buscar(ptr4, aux->info);
               if(q == NULL)
               {
                  ptr4 = InsertarAsc(ptr4, aux->info);
               }
            }
            aux3 = aux3->sig;
         }
         aux2 = aux2->sig;
      }
      aux = aux->sig;
   }
   /*con esta seccion comparamos la lista 3 con la lista 2 y 1*/
   aux3 = ptr3->sig;
   while(aux3 != ptr3)
   {
      aux2 = ptr2->sig;
      while(aux2 != ptr2)
      {
         aux = ptr->sig;
         while(aux != ptr)
         {
            if(aux3->info == aux2->info || aux3->info == aux->info)
            {
               q = Buscar(ptr4, aux3->info);
               if(q == NULL)
               {
                  ptr4 = InsertarAsc(ptr4, aux3->info);
               }
            }
            aux = aux->sig;
         }
         aux2 = aux2->sig;
      }
      aux3 = aux3->sig;
   }
   cout << "Insercion completa en la lista 4." << endl;
   cin.ignore();
   cin.get();
}
4----------------------------------------------------------------------------------
-----en el main:
case 8:
   system("clear");
   int quitar;
   cout << "Ingrese el elemento a eliminar: ";
   cin >> quitar;
   ptr = Josephus(ptr, quitar);
   break;
-----en la funcion:
Nodo *Josephus(Nodo *ptr,int info)
{
   Nodo *aux = Buscar(ptr, info);
   int num;
   if(aux == NULL)
   {
      cout << "Elemento no se puede eliminar" << endl;
      cin.ignore();
      cin.get();
   }
   else
   {
      while(ptr->sig->sig != ptr)
      {
         /*con "num" realizamos una copia del valor de nodo antes de eliminarlo y luego, nos
         movemos ese num de veces dentro de la lista y eliminamos ese nodo, realizamos
         copia de su valor y repetimos el proceso hasta que quede un solo nodo*/
         /*como la lista tiene un encabezado debemos confirmas que al posicionar queda en ptr; ya
         que como ese nodo no tiene valor debemos mover el apuntador al sgte*/
         if(aux == ptr)
         {
            aux = aux->sig;
            num = aux->info;
            ptr = EliminarNodo(ptr, num);
         }
         else
         {
            num = aux->info;
            ptr = EliminarNodo(ptr, num);
         }
         for(int i = 0; i < num; i++)
         {
            /*si el el recorrido llega a estar en ptr se mueve un nodo de mas para que
            no altere el flujo del algoritmo*/
            if(aux == ptr)
            {
               aux = aux->sig;
            }
            aux = aux->sig;
         }
      }
      cout << "Ahora solo hay un elemento en la lista." << endl;
      cin.ignore();
      cin.get();
   }
   return ptr;
}
5----------------------------------------------------------------------------------
=====se tienen que modificar algunas funciones para incluir el parametro de nombre
-----en el main:
case 8:
   system("clear");
   cin.ignore();
   cout << "Ingrese el nombre: ";
   getline(cin, name);
   cout << "Ingrese el numero: ";
   cin >> number;
   ptr5 = InserConNombre(ptr5, name, number);
   break;
case 9:
   system("clear");
   if(ptr5 == NULL)
   {
      cout << "Lista vacia" << endl;
      cin.get();
   }
   else
   {
      cin.ignore();
      cout << "Ingrese el nombre de la persona a eliminar: ";
      getline(cin, name);
      ptr5 = JosephusByName(ptr5, name);
   }
   break;
-----las funciones para incluir el parametro nombre:
Nodo *InserConNombre(Nodo *ptr, string nombre, int elem)
{
   Nodo *aux, *aux2;
   aux = (struct Nodo*) malloc (sizeof(Nodo));
   aux->nombre = nombre;
   aux->info = elem;
   if(ptr == NULL)
   {
      aux2 = (struct Nodo*) malloc (sizeof(Nodo));
      ptr = aux2;
      aux2->sig = aux;
      aux->sig = aux2;
   }
   else
   {
      aux2 = ptr;
      aux->sig = aux2->sig;
      aux2->sig = aux;
   }
   return ptr;
}
/*se ocupa la libreria "cstring" o "string.h" para la funcion COMPARE maneja la sgte syntax
*  if(string1.compare(string2) != 0 "no son iguales")
*/
Nodo *BuscarConNombre(Nodo *ptr, string nombre)
{
   string comp;
   if(ptr == NULL)
   {
      return NULL;
   }
   else
   {
      Nodo *aux = ptr->sig;
      while(aux != ptr)
      {
         comp = aux->nombre;
         if(comp.compare(nombre) == 0)
         {
            return aux;
         }
         aux = aux->sig;
      }
      return NULL;
   }
}
void Mostrar(Nodo *ptr)
{
   Nodo *aux;
   aux = ptr->sig;
   cout << "PTR ->" << endl;
   while(aux != ptr)
   {
      cout << "Nombre: " << aux->nombre << "\tNumero: " << aux->info << " ->" << endl;
      aux = aux->sig;
   }
   cout << "-> PTR" << endl;
}
Nodo *JosephusByName(Nodo *ptr, string info)
{
   Nodo *aux = BuscarConNombre(ptr, info);
   int num;
   if(aux == NULL)
   {
      cout << "Elemento no se puede eliminar" << endl;
      cin.ignore();
      cin.get();
   }
   else
   {
      while(ptr->sig->sig != ptr)
      {
         /*realizar la misma verificacion de siempre si esta en la cabecera moverlo un nodo*/
         if(aux == ptr)
         {
            aux = aux->sig;
            num = aux->info;
            ptr = EliminarNodo(ptr, num);
         }
         else
         {
            num = aux->info;
            ptr = EliminarNodo(ptr, num);
         }
         for(int i = 0; i < num; i++)
         {
            /*si el el recorrido llega a estar en ptr se mueve un nodo de mas para que
            no altere el flujo del algoritmo*/
            if(aux == ptr)
            {
               aux = aux->sig;
            }
            aux = aux->sig;
         }
      }
      cout << "Ahora solo hay un elemento en la lista." << endl;
      cin.get();
   }
   return ptr;
}
6----------------------------------------------------------------------------------
=====la maqueta necesita ligeras modificaciones en torno al prototipo de almacenamiento cambiarlo de int a long long int
=====las funciones y estructura que se vean involucradas en el proceso sufren esta modificacion
-----en el main:
case 8:
   int limit;
   system("clear");
   cout << "Se almacenara en la lista la secuencia fibonacci." << endl;
   cout << "Ingrese el numero limite: ";
   cin >> limit;
   ptr = Fibonacci(ptr, limit);
   break;
-----en la funcion:
Nodo *Fibonacci(Nodo *ptr, int tope)
{
   /*el proceso es tener en base el 0 y 1(sumandos para llevar la operacion), luego sumar
   y reasignar los numeros para no usar mas recursos y en vista que tenemos creados los dos
   nodos (0 y 1) reducimos en 2 el valor digitado por el usuario*/
   long long int num1, num2, num3;
   num1 = 0;
   num2 = 1;
   ptr = insertarCola(ptr, num1);
   ptr = insertarCola(ptr, num2);
   tope -= 2;
   for(int i = 0; i < tope; i++)
   {
      num3 = num1 + num2;
      num1 = num2;
      num2 = num3;
      ptr = insertarCola(ptr, num3);
   }
   return ptr;
}
FINAL------------------------------------------------------------------------------
