EJERCICIOS DEL MODULO DE GARRIDO DE LISTAS CIRCULARES SIMPLES
1- Dada una lista circular simple hacer un algoritmo que elimine los nodos cuya informacion sea impar.
2- Dada una lista circular simple ordenada ascendentemente hacer un algoritmo que inserte un nodo con la informacion ELEM y la lista siga quedando ordenada.
3- Dada dos listas PTR1 y PTR2 hacer un algoritmo que una la lista 2 con la lista 1 teniendo encuenta lo sgte:
   a- Si el numero de nodos de la lista 1 es mayor al numero de nodos de la lista 2 se inserta la lista 2 al final de la lista 1.
   b- Si el numero de nodos de la lista 1 es menor al numero de nodos de la lista 2 se inserta la lista 1 al final de la lista 2.
   c- Si el numero de nodos de la lista 1 es igual al numero de nodos de la lista 2 se envia un mensaje al usuario diciendo que no se puede insertar.
4- Dada una lista circular simple hacer un algoritmo que saque la parte entera del promedio de los elementos de la lista y luego elimine los nodos cuya
   informacion sea menor a la parte entera del promedio.
5- Dada una lista simple y un nodo hacer un algoritmo que elimine el nodo de la posicion N, repita este procedimiento hasta que quede un solo
   nodo(problema de josephus) contando siempre el n-esimo nodo.
6- Dada dos listas circulares simples PTR1 y PTR2 hacer las sgtes operaciones:
   a- Union: Los elementos de PTR1 y PTR2 pasan a PTR3 sin repetirse.
   b- Intercepcion: Los elementos de PTR1 que esten en PTR2 pasan a PTR3.
   c- Diferencia PTR1-PTR2: Los elementos de PTR1 que no se encuentren en PTR2 pasan a PTR3.
7- Dada una lista circular simple hacer un algoritmo que busque un elemento ELEM e intercambie el nodo donde se encuentra ELEM con el primero.

   DESARROLLO
1---------------------------------------------------------------------------------
en el main:
case 8:
   system("clear");
   if(ptr == NULL)
   {
      cout << "Lista vacia" << endl;
      cin.ignore();
      cin.get();
   }
   else
   {
      ptr = ElimImpares(ptr);
   }
   break;
en la funcion:
Nodo *ElimImpares(Nodo *ptr)
{
   Nodo *aux = ptr;
   int elem;
   while(aux->sig != ptr)
   {
      if(aux->info %2 != 0)
      {
      /*realizamos una copia de el elemento para pasarlo a la funcion, pero
      tambien podemos pasarle a la funcion aux->info*/
         elem = aux->info;
         ptr = EliminarNodo(ptr, elem);
         aux = aux->sig;
      }
      else
      {
         aux = aux->sig;
      }
   }
   /*como no toma el ultimo elemento hacemos la comprobacion una vez mas por fuera
   del ciclo*/
   if(aux->info %2 != 0)
   {
      elem = aux->info;
      ptr = EliminarNodo(ptr, elem);
   }
   return ptr;
}
2---------------------------------------------------------------------------------
/*dado a que el enunciado nos estipula que debe haber una lista previamente ordenada
el algoritmo trabajara cuando hay por lo menos un elemento*/
en el main:
case 8:
   system("clear");
   cout << "Ingrese el dato: ";
   cin >> dato;
   ptr = InsertarAsc(ptr, dato);
   break;
en la funcion:
/*esta funcion solo funciona cuando hay por lo menos un nodo en la lista.
*si se quiere hacer para que tome valores desde ptr == null se cambia
*lista vacia por: ptr = p; p->sig = ptr */
Nodo *InsertarAsc(Nodo *ptr, int xinfo)
{
   Nodo *p = (struct Nodo*) malloc (sizeof(Nodo));
   p->info = xinfo;
   if(ptr == NULL)
   {
      cout << "Lista vacia" << endl;
      cin.ignore();
      cin.get();
      }
   else
   {
      Nodo *aux = ptr, *aux2;
      /*posicionamos aux en el nodo anterior al de mayor info que el ingresado*/
      while(aux->sig != ptr && xinfo > aux->info)
      {
         aux = aux->sig;
      }
      if(aux == ptr)
      {
         /*esta verificacion nos salva si hemos de posicionar antes o despues del nodo*/
         if(xinfo < aux->info)
         {
            aux2 = ptr;
            while(aux2->sig != aux)
            {
               aux2 = aux2->sig;
            }
            p->sig = ptr;
            aux2->sig = p;
            ptr = p;
         }
         else
         {
            p->sig = aux->sig;
            aux->sig = p;
         }
      }
      else
      {
         if(xinfo > aux->info)
         {
            aux->sig = p;
            p->sig = ptr;
         }
         else
         {
            aux2 = ptr;
            while(aux2->sig != aux)
            {
               aux2 = aux2->sig;
            }
            aux2->sig = p;
            p->sig = aux;
         }
      }
   }
   return ptr;
}
3---------------------------------------------------------------------------------
en el main:
case 8:
   system("clear");
   if(ptr == NULL || ptr2 == NULL)
   {
      if(ptr == NULL)
      {
         cout << "Lista 1 vacia..." << endl;
         cin.ignore();
         cin.get();
      }
      else
      {
         cout << "Lista 2 vacia..." << endl;
         cin.ignore();
         cin.get();
      }
   }
   else
   {
      UnirListas(ptr, ptr2);
   }
   break;
en la funcion:
Nodo *UnirListas(Nodo *ptr, Nodo *ptr2)
      Insercion(ptr, ptr2);
   }
   break;
en la funcion:
Nodo *Insercion(Nodo *ptr, Nodo *ptr2)
{
   Nodo *aux = ptr, *aux2 = ptr2;
   int cont1 = 1, cont2 = 1;
   while(aux->sig != ptr)
   {
      aux = aux->sig;
      cont1++;
   }
   while(aux2->sig != ptr2)
   {
      aux2 = aux2->sig;
      cont2++;
   }
   if(cont1 > cont2)
   {
      /*se inserta lista 2 al final de lista 1*/
      aux->sig = ptr2;
      aux2->sig = ptr;
   }
   else if(cont1 < cont2)
   {
      /*se inserta lista 1 al final de lista 2*/
      aux2->sig = ptr;
      aux->sig = ptr2;
   }
   else
   {
      cout << "No se puede efectuar la union..." << endl;
      /*si las listas son de igual tamano no se puede realizar la insercion*/
      cout << "No se puede efectuar la insercion..." << endl;
      cin.ignore();
      cin.get();
   }
}
4---------------------------------------------------------------------------------
en el main:
case 8:
   system("clear");
   ptr = PromedioElim(ptr);
   break;
en la funcion:
Nodo *PromedioElim(Nodo *ptr)
{
   int sum = 0, num = 1, elem, prom;
   Nodo *aux = ptr;
   while(aux->sig != ptr)
   {
      sum += aux->info;
      aux = aux->sig;
      num++;
   }
   sum += aux->info;
   prom = sum/num;
   /*hasta aqui se ha realizado el promedio, luego evaluamos los elementos de la
   lista con el promedio y eliminamos si son menores*/
   aux = ptr;
   while(aux->sig != ptr)
   {
      if(aux->info < prom)
      {
         /*podemos pasarle a eliminar aux->info*/
         elem = aux->info;
         ptr = EliminarNodo(ptr, elem);
         aux = aux->sig;
      }
      else
      {
         aux = aux->sig;
      }
   }
   /*como no toma el ultimo volvemos a realizar la evaluacion*/
   if(aux->info < prom)
   {
      elem = aux->info;
      ptr = EliminarNodo(ptr, elem);
   }
   return ptr;
}
5---------------------------------------------------------------------------------
en el main:
case 8:
   system("clear");
   int elem;
   if(ptr == NULL)
   {
      cout << "Lista vacia..." << endl;
   }
   else
   {
      cout << "Ingrese el nodo a eliminar: ";
      cin >> elem;
      ptr = Josephus(ptr, elem);
   }
   break;
en la funcion:
Nodo *Josephus(Nodo *ptr, int elem)
{
   Nodo *aux = Buscar(ptr, elem);
   int num;
   if(aux == NULL)
   {
      cout << "Elemento no se puede eliminar" << endl;
      cin.ignore();
      cin.get();
   }
   else
   {
      while(ptr->sig != ptr)
      {
         /*realizamos una copia del valor de nodo antes de eliminarlo y luego, nos
         movemos ese num de veces dentro de la lista y eliminamos ese nodo, realizamos
         copia de su valor y repetimos el proceso hasta que quede un solo nodo*/
         num = aux->info;
         ptr = EliminarNodo(ptr, num);
         for(int i = 1; i < num; i++)
         {
            aux = aux->sig;
         }
         aux = aux->sig;
      }
   }
   return ptr;
}
7---------------------------------------------------------------------------------
en el main:
case 8:
   int opt, dato2;
   system("clear");
   cout << "Se intercambiara el nodo del dato ingresado con el primero nodo" << endl;
   cout << "Ingrese 1 para continuar u otro numero para ir al menu anterior: ";
   cin >> opt;
   if(opt == 1)
   {
      cout << "Ingrese el dato a buscar: ";
      cin >> dato2;
      ptr = intercambio(ptr, dato2);
   }
   else
   {
      /*unexpected function*/
   }
   break;
en la funcion:
Nodo *intercambio(Nodo *ptr, int elem)
{
   Nodo *q = Buscar(ptr, elem);
   if(q == NULL)
   {
      cout << "No se encontro el elemento" << endl;
      cin.ignore();
      cin.get();
   }
   else if(ptr->sig == ptr)
   {
      cout << "solo hay un elemento en la lista" << endl;
      cin.ignore();
      cin.get();
   }
   else if(q == ptr)
   {
      cout << "el elemento ya esta en el primer nodo" << endl;
      cin.ignore();
      cin.get();
   }
   else
   {
      Nodo *aux, *aux2;
      /*para cuando solo hay dos elem en la lista*/
      if(ptr->sig->sig == ptr && q->sig == ptr)
      {
         ptr = ptr->sig;
      }
      else if(q->sig == ptr)
      {
         aux = ptr;
         while(aux->sig != q)
         {
            aux = aux->sig;
         }
         q->sig = ptr->sig;
         aux->sig = ptr;
         ptr->sig = q;
         ptr = q;
      }
      else
      {
         /*se posicionan dos aux antes de cada parte, luego se crean mini listas SIMPLES
         y despues se mueven los aux para terminar de conectar la lista como si fuese una sola*/
         aux = ptr;
         while(aux->sig != ptr)
         {
            aux = aux->sig;
         }
         aux2 = ptr;
         while(aux2->sig != q)
         {
            aux2 = aux2->sig;
         }
         aux2->sig = ptr;
         aux->sig = q;
         aux2 = ptr->sig;
         aux = q->sig;
         q->sig = aux2;
         ptr->sig = aux;
         ptr = q;
      }
   }
   return ptr;
}
6---------------------------------------------------------------------------------
en el main:
case 8:
   system("clear");
   if(ptr == NULL || ptr2 == NULL)
   {
      if(ptr == NULL)
      {
         cout << "Lista 1 vacia..." << endl;
         system("pause");
      }
      else
      {
         cout << "Lista 2 vacia..." << endl;
         system("pause");

      }
   }
   else
   {
      OpListas(ptr, ptr2);
   }
   break;
en la funcion OPERACION LISTAS:
/*como se trata de operaciones en torno a una 3ra lista podemos usar todo como procedimientos*/
Nodo *OpListas(Nodo *ptr, Nodo *ptr2)
{
   int opt;
   cout << "1- Union(elementos de ptr1 y ptr2 pasan a ptr3 sin ocurrencias)\n2- Intercepcion(elem de ptr1 que esten en ptr2 pasan a ptr3)\n3- Diferencia(elem de ptr1 que no se encuentren en ptr2 pasan a ptr3)" << endl;
   cout << "Ingrese una opcion: ";
   cin >> opt;
   switch(opt)
   {
      case 1:
         Union(ptr, ptr2);
         break;
      case 2:
         Intercepcion(ptr, ptr2);
         break;
      case 3:
         Diferencia(ptr, ptr2);
         break;
      default:
         cout << "Ha ingresado un valor invalido..." << endl;
         system("pause");
         break;
   }
}
en el procedimiento UNION:
Nodo *Union(Nodo *ptr, Nodo *ptr2)
{
   /*los elem de ptr1 y ptr2 pasan a ptr3 sin ocurrencias*/
   Nodo *aux = ptr, *aux2 = ptr2, *q;
   /*ingresamos la lista 1 en la lista 2*/
   while(aux->sig != ptr)
   {
      ptr3 = InsertarAsc(ptr3, aux->info);
      aux = aux->sig;
   }
   ptr3 = InsertarAsc(ptr3, aux->info);
   /*evaluamos que los elementos de lista 2 no esten en lista 1 e ingresamos*/
   while(aux2->sig != ptr2)
   {
      q = Buscar(ptr, aux2->info);
      if (q == NULL)
      {
         ptr3 = InsertarAsc(ptr3, aux2->info);
      }
      aux2 = aux2->sig;
   }
   q = Buscar(ptr, aux2->info);
   if (q == NULL)
   {
      ptr3 = InsertarAsc(ptr3, aux2->info);
   }
}
en el procedimiento INTERCEPCION:
/*este procedimiento tambien se traduce como INTERSECION de conjuntos y/o listas*/
Nodo *Intercepcion(Nodo *ptr, Nodo *ptr2)
{
   Nodo *aux = ptr, *aux2 = ptr2, *q;
   while(aux->sig != ptr)
   {
      aux2 = ptr2;
      while(aux2->sig != ptr2)
      {
         /*si el elemento esta en ambas listas(lista 1, lista 2) se inserta en la lista3*/
         if(aux2->info == aux->info)
         {
            q = Buscar(ptr3, aux2->info);
            if (q == NULL)
            {
               ptr3 = InsertarAsc(ptr3, aux2->info);
            }
         }
         aux2 = aux2->sig;
      }
      if(aux2->info == aux->info)
      {
         q = Buscar(ptr3, aux2->info);
         if (q == NULL)
         {
            ptr3 = InsertarAsc(ptr3, aux2->info);
         }
      }
      aux = aux->sig;
   }
   /*como aux esta en el ultimo nodo y termina el bucle debemos recorrerlo por fuera
   dado que el ciclo termina y hacer obviamente la correspondiente evaluacion*/
   aux2 = ptr2;
   while(aux2->sig != ptr2)
   {
      if(aux2->info == aux->info)
      {
         q = Buscar(ptr3, aux2->info);
         if (q == NULL)
         {
            ptr3 = InsertarAsc(ptr3, aux2->info);
         }
      }
      aux2 = aux2->sig;
   }
   if(aux2->info == aux->info)
   {
      q = Buscar(ptr3, aux2->info);
      if (q == NULL)
      {
         ptr3 = InsertarAsc(ptr3, aux2->info);
      }
   }
}
en el procedimiento DIFERENCIA:
Nodo *Diferencia(Nodo *ptr, Nodo *ptr2)
{
   /*usamos un contador(cont), aunque tambien se puede usar un switch(sw), aunque
   con el contador podemos llevar un control de cuantas veces se repiten los elementos
   en ambas listas*/
   int cont = 0;
   Nodo *aux = ptr, *aux2 = ptr2, *q;
   while(aux->sig != ptr)
   {
      aux2 = ptr2;
      cont = 0;
      while(aux2->sig != ptr2)
      {
         if(aux->info == aux2->info)
         {
            cont++;
         }
         aux2 = aux2->sig;
      }
      if(aux->info == aux2->info)
      {
         cont++;
      }
      /*la insercion de datos se dara cuando no hayan repetidos, es decir, cont == 0*/
      if(cont == 0)
      {
         q = Buscar(ptr3, aux->info);
         if(q == NULL)
         {
            ptr3 = InsertarAsc(ptr3, aux->info);
         }
      }
      aux = aux->sig;
   }
   /*al igual que en intercepcion el ultimo elemento de la primera lista debe ser evaluado
   por fuera del bucle*/
   aux2 = ptr2;
   cont = 0;
   while(aux2->sig != ptr2)
   {
      if(aux->info == aux2->info)
      {
         cont++;
      }
      aux2 = aux2->sig;
   }
   if(aux->info == aux2->info)
   {
      cont++;
   }
   if(cont == 0)
   {
      q = Buscar(ptr3, aux->info);
      if(q == NULL)
      {
         ptr3 = InsertarAsc(ptr3, aux->info);
      }
   }
}
7---------------------------------------------------------------------------------
en el main:
case 8:
   /*de preferencia se toman los casos en el main para limitar a la funcion o procedimiento
   a ser un conjunto de operaciones dedicadas*/
   system("clear");
   cout << "Se intercambiara el nodo del dato ingresado con el primero nodo" << endl;
   cout << "Ingrese 1 para continuar u otro numero para ir al menu anterior: ";
   cin >> opt;
   if(opt == 1)
   {
      if(ptr->sig == ptr || ptr == NULL)
      {
         cout << "No se puede operar(lista vacia o con un elemento)" << endl;
         cin.ignore();
         cin.get();
      }
      else
      {
         cout << "Ingrese el dato a buscar: ";
         cin >> dato;
         Nodo *q = Buscar(ptr, dato);
         if(q == NULL)
         {
            cout << "No se encontro el elemento" << endl;
            cin.ignore();
            cin.get();
         }
         else if(q == ptr)
         {
            cout << "el elemento ya esta en el primer nodo" << endl;
            cin.ignore();
            cin.get();
         }
         else
         {
            ptr = intercambio(ptr, dato);
         }
      }
   }
   else
   {
      /*unexpected function*/
   }
   break;
en la funcion:
Nodo *intercambio(Nodo *ptr, int elem)
{
   Nodo *q = Buscar(ptr, elem), *aux, *aux2;
   /*para cuando solo hay dos elem en la lista*/
   if(ptr->sig->sig == ptr && q->sig == ptr)
   {
      ptr = ptr->sig;
   }
   else if(q->sig == ptr)
   {
      aux = ptr;
      while(aux->sig != q)
      {
         aux = aux->sig;
      }
      q->sig = ptr->sig;
      aux->sig = ptr;
      ptr->sig = q;
      ptr = q;
   }
   else
   {
      /*se posicionan dos aux antes de cada parte, luego se crean MINI LISTAS SIMPLES
      y despues se mueven los aux para terminar de conectar las lista como si fuesen una sola*/
      aux = ptr;
      while(aux->sig != ptr)
      {
         aux = aux->sig;
      }
      aux2 = ptr;
      while(aux2->sig != q)
      {
         aux2 = aux2->sig;
      }
      aux2->sig = ptr;
      aux->sig = q;
      aux2 = ptr->sig;
      aux = q->sig;
      q->sig = aux2;
      ptr->sig = aux;
      ptr = q;
   }
   return ptr;
}
FINAL--------------------------------------------------------------------------
