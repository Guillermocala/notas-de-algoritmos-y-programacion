   EJERCICIOS DE COLAS DEL MODULO (COMPLETE)
1- Un estacionamiento de avionetas de un aerodromo es una linea con la capacidad de hasta 12 avionetas. Las avionetas llegan cuando llega un piloto a recoger
una avioneta, si esta no esta justamente en el extremo de salida (derecha). Todas las avionetas a su derecha han de ser returadas, sacar la suya y las retiradas
colocadas de nuevo en el mismo orden relativo en que estaban. La salida de una avioneta supone que las demas son movidas hacia adelante de tal forma que los
espacions libres del estacionamiento esten en la parte izquierda.
2- Dada una cola diga si es palindroma.
3- Hacer un algoritmo que invierta los elem de la cola.
4- Hacer un algoritmo que elimine los repetidos de una cola.
5- Dada una cola con elementos pares e impares hacer un algoritmo que separes en dos colas los elem asi:
   pares en la cola1
   impares en la cola2
6- Dada una cola en forma oredenada hacer un algoritmo que inserte un elem en la cola y que quede ordenada.
7- Dada una cola que guarde los tiempos de impresion de los trabajos en una impresora, hacer un algoritmo que halle el maximo, minimo y el
promedio de los tiempos de impresion.
8- Hacer un algoritmo que diga si dos colas son iguales.
9- Realice las operaciones basicas de colas usando vectores y pruebelas en un programa en c.
10- Realice las operaciones basicas de colas usando listas simples y pruebelas en un programa en c.
11- Inserte un elemento elem en una posicion pos dada a partir del primer elemento de la cola.
DESARROLLO======================================================================
1-------------------------------------------------------------------------------
-----en el main:
case 4:
   system("clear");
   cout << "Ingrese el elemento a eliminar: ";
   cin >> xinfo;
   Tope = Invert(Tope, xinfo);
   Mostrar(Tope);
   break;
-----en la funcion:
lista *ElimElem(lista *tope, int elem)
{
   lista *tope2;
   tope2 = InicCola(tope2);
   while(!ColaVacia(tope))
   {
      if(InfoCola(tope) != elem)
      {
         tope2 = InsertaCola(tope2, InfoCola(tope));
      }
      tope = ElimCola(tope);
   }
   return tope2;
}
2-------------------------------------------------------------------------------
-----en el main:
case 4:
   system("clear");
   Tope = Palindrome(Tope);
   Mostrar(Tope);
   break;
-----en la funcion:
lista *Palindrome(lista *tope)
{
   lista *tope2, *tope3, *tope4;
   tope2 = InicCola(tope2);
   tope3 = InicCola(tope3);
   tope4 = InicCola(tope4);
   while(!ColaVacia(tope))
   {
      tope2 = InsertaCola(tope2, InfoCola(tope));
      tope3 = InsertaInver(tope3, InfoCola(tope));
      tope = ElimCola(tope);
   }
   while(!ColaVacia(tope2))
   {
      tope = InsertaCola(tope, InfoCola(tope2));
      tope4 = InsertaCola(tope4, InfoCola(tope2));
      tope2 = ElimCola(tope2);
   }
   while(!ColaVacia(tope3))
   {
      if(InfoCola(tope3) == InfoCola(tope4))
      {
         tope4 = ElimCola(tope4);
      }
      tope3 = ElimCola(tope3);
   }
   if(!ColaVacia(tope4))
   {
      cout << "No palindroma" << endl;
   }
   else
   {
      cout << "Palindroma" << endl;
   }
   return tope;
}
lista *InsertaInver(lista *tope, int elem)
{
   lista *r = (struct lista*) malloc (sizeof(lista)), *j;
   r->info = elem;
   if(tope == NULL)
   {
      tope = r;
      r->sig = NULL;
   }
   else
   {
      r->sig = tope;
      tope = r;
   }
   return tope;
}
3-------------------------------------------------------------------------------
-----en el main:
case 4:
   system("clear");
   Tope = Invert(Tope);
   Mostrar(Tope);
   break;
-----en la funcion:
lista *Invert(lista *tope)
{
   lista *tope2;
   tope2 = InicCola(tope2);
   while(!ColaVacia(tope))
   {
      tope2 = InsertaInver(tope2, InfoCola(tope));
      tope = ElimCola(tope);
   }
   return tope2;
}
4-------------------------------------------------------------------------------
-----en el main:
case 4:
   system("clear");
   Tope = UnicaOcu(Tope);
   Mostrar(Tope);
   break;
-----en la funcion:
lista *UnicaOcu(lista *tope)
{
   int dato;
   lista *tope2, *tope3;
   tope2 = InicCola(tope2);
   tope3 = InicCola(tope3);
   while(!ColaVacia(tope))
   {
      dato = InfoCola(tope);
      tope = ElimCola(tope);
      while(!ColaVacia(tope))
      {
         if(InfoCola(tope) != dato)
         {
            tope2 = InsertaCola(tope2, InfoCola(tope));
         }
         tope = ElimCola(tope);
      }
      if(!ColaVacia(tope2))
      {
         while(!ColaVacia(tope2))
         {
            tope = InsertaCola(tope, InfoCola(tope2));
            tope2 = ElimCola(tope2);
         }
      }
      tope3 = InsertaCola(tope3, dato);
   }
   return tope3;
}
5-------------------------------------------------------------------------------
-----en el main:
case 4:
   system("clear");
   Tope = ParImpar(Tope, Tope1, Tope2);
   Mostrar(Tope);
   break;
-----en la funcion:
lista *ParImpar(lista *tope, lista *&tope1, lista *&tope2)
{
   lista *tope3;
   tope3 = InicCola(tope3);
   while(!ColaVacia(tope))
   {
      if(InfoCola(tope)%2 == 0)
      {
         tope1 = InsertaCola(tope1, InfoCola(tope));
      }
      else
      {
         tope2 = InsertaCola(tope2, InfoCola(tope));
      }
      tope3 = InsertaCola(tope3, InfoCola(tope));
      tope = ElimCola(tope);
   }
   return tope3;
}
6-------------------------------------------------------------------------------
-----en el main:
case 4:
   system("clear");
   cout << "Ingrese el elemento: ";
   cin >> xinfo;
   Tope = InsertOrd(Tope, xinfo);
   Mostrar(Tope);
   break;
-----en la funcion:
lista *InsertOrd(lista *tope, int elem)
{
   /*como solo necesitamos insertar una ocurrencia usamos un switch*/
   int sw = 1;
   lista *tope2;
   tope2 = InicCola(tope2);
   while(!ColaVacia(tope))
   {
      if(elem < InfoCola(tope) && sw)
      {
         tope2 = InsertaCola(tope2, elem);
         sw = 0;
      }
      tope2 = InsertaCola(tope2, InfoCola(tope));
      tope = ElimCola(tope);
   }
   return tope2;
}
7-------------------------------------------------------------------------------
-----en el main:
case 4:
   system("clear");
   Tope = Tiempos(Tope);
   Mostrar(Tope);
   break;
-----en la funcion:
lista *Tiempos(lista *tope)
{
   int max, min;
   float promedio, sum = 0, cant = 0;
   lista *tope2;
   tope2 = InicCola(tope2);
   max = InfoCola(tope);
   min = InfoCola(tope);
   while(!ColaVacia(tope))
   {
      cant++;
      sum += InfoCola(tope);
      if(max < InfoCola(tope))
      {
         max = InfoCola(tope);
      }
      else if(min > InfoCola(tope))
      {
         min = InfoCola(tope);
      }
      tope2 = InsertaCola(tope2, InfoCola(tope));
      tope = ElimCola(tope);
   }
   promedio = sum/cant;
   cout << "El valor maximo es: " << max << endl;
   cout << "El valor minimo es: " << min << endl;
   cout << "El promedio es: " << promedio << endl;
   return tope2;
}
8-------------------------------------------------------------------------------
-----en el main:
case 4:
   system("clear");
   Tope = ColasIguales(Tope, Tope1);
   Mostrar(Tope);
   break;
-----en la funcion:
/*retornamos una cola y la otra la pasamos por referencia, para no perder
ninguna cola*/
lista *ColasIguales(lista *tope, lista *&tope2)
{
   bool ver = true;
   lista *tope3, *tope4;
   tope3 = InicCola(tope3);
   tope4 = InicCola(tope4);
   while(!ColaVacia(tope))
   {
      if(!ColaVacia(tope2))
      {
         if(InfoCola(tope) != InfoCola(tope2))
         {
            ver = false;
         }
         tope4 = InsertaCola(tope4, InfoCola(tope2));
         tope2 = ElimCola(tope2);
      }
      else
      {
         ver = false;
      }
      tope3 = InsertaCola(tope3, InfoCola(tope));
      tope = ElimCola(tope);
   }
   if(!ColaVacia(tope2))
   {
      ver = false;
      while(!ColaVacia(tope2))
      {
         tope4 = InsertaCola(tope4, InfoCola(tope2));
         tope2 = ElimCola(tope2);
      }
   }
   while(!ColaVacia(tope4))
   {
      tope2 = InsertaCola(tope2, InfoCola(tope4));
      tope4 = ElimCola(tope4);
   }
   if(ver)
   {
      cout << "Colas iguales" << endl;
   }
   else
   {
      cout << "Colas NO iguales" << endl;
   }
   return tope3;
}
9-------------------------------------------------------------------------------
/*aqui decidi insertar por cola y eliminar por cabeza, las funciones estan asi*/
-----las funciones:
int InicCola(int tope)
{
   tope = -1;
   return tope;
}
int InfoCola(int vector[], int tope)
{
   return vector[tope];
}
int InsertaCola(int tope, int vector[], int elem)
{
   tope++;
   vector[tope] = elem;
   return tope;
}
int ElimCola(int vector[], int tope)
{
   if(!ColaVacia(tope))
   {
      for(int i = 0; i <= tope; i++)
      {
         vector[i] = vector[i+1];
      }
      tope--;
      printf("\n Registro Eliminado con Exito\n");
      return tope;
   }
   else
   {
      printf("\n La Cola esta Vacia....\n");
   }
   cin.ignore();
   cin.get();
}
bool ColaVacia(int tope)
{
   if(tope < 0)
   {
      return true;
   }
   else
   {
      return false;
   }
}
void Mostrar(int vector[], int tope)
{
   if(tope < 0)
   {
      printf("\n La Cola esta Vacia....\n");
   }
   else
   {
      for(int i = 0; i <= tope; i++)
      {
         cout << vector[i] << " -> ";
      }
   }
   cin.ignore();
   cin.get();
}
10------------------------------------------------------------------------------
/*aqui las funciones estan para insertar por cola y eliminar por cabeza*/
-----las funciones:
lista *InicCola(lista *tope)
{
   tope = NULL;
   return tope;
}
int InfoCola(lista *tope)
{
   return tope->info;
}
lista *InsertaCola(lista *tope, int info)
{
   lista *r = (struct lista*) malloc (sizeof(lista)), *j;
   r->info = info;
   if(tope == NULL)
   {
      tope = r;
      r->sig = NULL;
   }
   else
   {
      j = tope;
      while(j->sig != NULL)
      {
         j = j->sig;
      }
      j->sig = r;
      r->sig = NULL;
   }
   return tope;
}
lista *ElimCola(lista *tope)
{
   if(!ColaVacia(tope))
   {
      lista *r = tope;
      tope = tope->sig;
      free(r);
      printf("\n Registro Eliminado con Exito\n");
      return tope;
   }
   else
   {
      printf("\n La Cola esta Vacia....\n");
   }
   cin.ignore();
   cin.get();
}
bool ColaVacia(lista *tope)
{
   if(tope == NULL)
   {
      return true;
   }
   else
   {
      return false;
   }
}
void Mostrar(lista *tope)
{
   lista *r = tope;
   if(tope == NULL)
   {
      printf("\n La Cola esta Vacia....\n");
   }
   else
   {
      while(r != NULL)
      {
         printf("[%d]->", r->info);
         r = r->sig;
      }
   }
   cin.ignore();
   cin.get();
}
11------------------------------------------------------------------------------
-----en el main:
case 4:
   system("clear");
   cout << "Ingrese el dato: ";
   cin >> xinfo;
   cout << "En que posicion desea ingresarlo?: ";
   cin >> xinfo2;
   Tope = InsertPos(Tope, xinfo, xinfo2);
   Mostrar(Tope);
   break;
-----en la funcion:
lista *InsertPos(lista *tope, int elem, int pos)
{
   int cont = 0;
   lista *tope2;
   tope2 = InfoCola(tope2);
   while(!ColaVacia(tope))
   {
      cont++;
      if(cont == pos)
      {
         tope2 = InsertaCola(tope2, elem);
      }
      tope2 = InsertaCola(tope2, InfoCola(tope));
      tope = ElimCola(tope);
   }
   return tope2;
}
END=============================================================================
